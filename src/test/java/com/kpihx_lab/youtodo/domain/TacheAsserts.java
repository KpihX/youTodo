package com.kpihx_lab.youtodo.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class TacheAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTacheAllPropertiesEquals(Tache expected, Tache actual) {
        assertTacheAutoGeneratedPropertiesEquals(expected, actual);
        assertTacheAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTacheAllUpdatablePropertiesEquals(Tache expected, Tache actual) {
        assertTacheUpdatableFieldsEquals(expected, actual);
        assertTacheUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTacheAutoGeneratedPropertiesEquals(Tache expected, Tache actual) {
        assertThat(expected)
            .as("Verify Tache auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTacheUpdatableFieldsEquals(Tache expected, Tache actual) {
        assertThat(expected)
            .as("Verify Tache relevant properties")
            .satisfies(e -> assertThat(e.getTitre()).as("check titre").isEqualTo(actual.getTitre()))
            .satisfies(e -> assertThat(e.getDescription()).as("check description").isEqualTo(actual.getDescription()))
            .satisfies(e -> assertThat(e.getDateEcheance()).as("check dateEcheance").isEqualTo(actual.getDateEcheance()))
            .satisfies(e -> assertThat(e.getPriorite()).as("check priorite").isEqualTo(actual.getPriorite()))
            .satisfies(e -> assertThat(e.getStatut()).as("check statut").isEqualTo(actual.getStatut()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTacheUpdatableRelationshipsEquals(Tache expected, Tache actual) {
        assertThat(expected)
            .as("Verify Tache relationships")
            .satisfies(e -> assertThat(e.getCategorie()).as("check categorie").isEqualTo(actual.getCategorie()));
    }
}
